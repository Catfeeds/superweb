<?php

namespace backend\controllers;

use backend\components\MyRedis;
use backend\models\Scheme;
use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\Json;
use yii\web\NotFoundHttpException;
use yii\web\Response;
use yii\widgets\ActiveForm;
use backend\models\importTextForm;
use common\models\MainClass;
use common\models\OttChannel;
use common\models\SubClass;
use common\models\search\SubClassSearch;


/**
 * SubClassController implements the CRUD actions for SubClass model.
 */
class SubClassController extends BaseController
{
    public $mainClass;

    public function beforeAction($action)
    {
        parent::beforeAction($action); // TODO: Change the autogenerated stub
        $main_class_id = Yii::$app->request->get('main-id');
        if ($main_class_id) {
            $this->mainClass = MainClass::findOne(['id' => $main_class_id]);
        }
        return true;

    }

    /**
     * Lists all SubClass models.
     * @return mixed
     */
    public function actionIndex()
    {
        $main_id = Yii::$app->request->get('main-id');

        $searchModel = new SubClassSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams, ['main_class_id' => $main_id]);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'mainClass' => $this->mainClass
        ]);
    }

    /**
     * Displays a single SubClass model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id)
        ]);
    }

    /**
     * Creates a new SubClass model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $main_class_id = Yii::$app->request->get('main_id');

        $model = new SubClass();
        $model->main_class_id = $main_class_id;
        $model->sort = 0;

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            Yii::$app->session->setFlash('success', '创建成功');
            return $this->redirect(['index', 'main-id' => $model->main_class_id]);
        } else {
            return $this->renderAjax('create', ['model' => $model]);
        }
    }

    public function actionValidateForm()
    {
        Yii::$app->response->format = Response::FORMAT_JSON;
        $model = new SubClass();
        $model->load(Yii::$app->request->post());

        return ActiveForm::validate($model);
    }

    /**
     * Updates an existing SubClass model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing SubClass model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $subClass = $this->findModel($id);
        $main_class_id = $subClass->main_class_id;
        $subClass->delete();

        $this->setFlash('success', '操作成功');
        return $this->redirect(['index', 'main-id' => $main_class_id]);
    }

    /**
     * Finds the SubClass model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return SubClass the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = SubClass::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }

    /**
     * 重新排列频道号码
     * @param $main_class_id
     * @return Response
     */
    public function actionResetNumber($main_class_id)
    {

        $subClasses = SubClass::find()
                           ->where(['main_class_id' => $main_class_id])
                           ->orderBy(['sort' => SORT_ASC])
                           ->with('ownChannel')
                           ->all();
        $start = 1;

        foreach ($subClasses as $subClass) {
            if (!empty($subClass->ownChannel)) {
                $channels = $subClass->ownChannel;
                foreach ($channels as $channel) {
                    if ($channel instanceof  OttChannel) {
                        if ($channel->use_flag) {
                            $channel->channel_number = $start++;
                        }else {
                            $channel->channel_number = '0';
                        }
                        $channel->save(false);
                    }
                }
            }
        }

        $this->setFlash('info', '重新排列频道号成功');

        return $this->redirect(Yii::$app->request->referrer);
    }

    public function actionImportViaText()
    {
        $importForm = new importTextForm();
        $importForm->mode = Yii::$app->request->get('mode');


        if ($importForm->load(Yii::$app->request->post()) && $importForm->validate()) {
            if ($importNum = $importForm->import()) {
                $this->setFlash('success', "导入成功:本次导入{$importNum}条");
            } else {
                $this->setFlash('warning', "导入0条");
            }

             return $this->redirect(['main-class/index']);
        }

        return $this->render('import-via-text', [
            'model' => $importForm
        ]);
    }

    public function actionGenerateCache($id)
    {
        //按方案号进行缓存
        $schemes = Scheme::find()->all();
        foreach ($schemes as $scheme) {
            $this->setJsonCache($id, $scheme);
        }

        $this->setFlash('success', '操作成功');
        return $this->redirect(Yii::$app->request->referrer);
    }

    private function setJsonCache($id, Scheme $scheme)
    {
        $mainClass = MainClass::findOne($id);

        $data['version'] = time();
        $data['scheme'] = $scheme->schemeName;
        $data['name'] = $mainClass->name;
        $data['zh_name'] = $mainClass->zh_name;
        $data['icon'] = $mainClass->icon;
        $data['description'] = $mainClass->description;
        $data['subClass'] = $this->getSubClassLink($mainClass, $scheme);
        $redis = MyRedis::init(MyRedis::REDIS_PROTOCOL);
        $redis->set("OTT_LIST_{$data['name']}_{$data['scheme']}", Json::encode($data));

        return $data;
    }

    /**
     * @param MainClass $mainClass
     * @param $mainClass
     * @param $scheme
     * @return array
     */
    public function getSubClassLink($mainClass, $scheme)
    {
        //查询子分类
        $items = [];
        $subClass = $mainClass->getSub(['use_flag' => 1])->all();
        //查询频道
        if (!empty($subClass)) {
            foreach ($subClass as $class) {
                if ($result = $this->getChannel($class, $scheme)) {
                     $_subClass = ArrayHelper::toArray($class);
                     $_subClass['channels'] = $result;
                     $items[] = $_subClass;
                }
            }
        }

        return $items;
    }

    /**
     * @param SubClass $class
     * @param $scheme
     * @return bool|array
     */
    private function getChannel($class, $scheme)
    {
        $items = [];
        $channels = $class->getOwnChannel(['use_flag' => 1])->all();

        if (empty($channels)) {
            return false;
        }

        foreach ($channels as $channel) {
          if ($channel instanceof OttChannel) {
              if ($links = $this->getLink($channel, $scheme)) {
                  $channel = ArrayHelper::toArray($channel);
                  $channel['links'] = $links;
                  $items[] = $channel;
              }
          }
        }

        return empty($items) ? false : $items;
    }

    /**
     * @param OttChannel $channel
     * @param $channel
     * @param $scheme
     * @return array|bool
     */
    private function getLink($channel, $scheme)
    {
        $items = [];
        //查询链接
        $links = $channel->getOwnLink(['use_flag' => 1])->all();
        if (!empty($links)) {
            foreach ($links as $link) {
                $flag = false;
                if ($link['scheme_id'] == 'all') {
                    $flag = true;
                } else {
                    $scheme_id = explode(',', $link['scheme_id']);
                    if (in_array($scheme->id, $scheme_id)) {
                       $flag = true;
                    }
                }

                if ($flag) {
                    unset($link['use_flag_text']);
                    unset($link['scheme_id']);
                    $items[] = $link;
                }

            }
        }

        return empty($items) ? false : $items;
    }


}
